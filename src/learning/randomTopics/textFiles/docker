Docker is an open-source platform designed to develop, ship, and run applications by using containers.
Containers allow developers to package up an application with all its dependencies—libraries, binaries,
configuration files—and ship it as a single package. This ensures that the application runs consistently regardless of the environment.

### Key Concepts of Docker
1. **Containers**: Lightweight and portable encapsulations of an environment where applications run.
2. **Images**: Templates used to create containers. Images are built using Dockerfiles.
3. **Dockerfile**: A script with instructions to build a Docker image.
4. **Docker Engine**: The core service that runs and manages containers.
5. **Docker Hub**: A cloud-based registry for sharing and storing Docker images.

### Benefits of Docker
- **Portability**: Runs consistently across environments (local, staging, production).
- **Efficiency**: Containers share the host OS kernel, making them lightweight and fast.
- **Isolation**: Applications run in separate containers, avoiding conflicts.
- **Scalability**: Easy to scale up and down using orchestration tools like Kubernetes.

### Common Docker Commands
1. **Setup and Configuration**
   - `docker version`: Check Docker version.
   - `docker info`: Display system-wide information.

2. **Working with Images**
   - `docker pull <image>`: Download an image from Docker Hub.
   - `docker build -t <name> .`: Build an image using a Dockerfile.
   - `docker images`: List all local images.

3. **Working with Containers**
   - `docker run <image>`: Run a container from an image.
   - `docker ps`: List running containers.
   - `docker ps -a`: List all containers (including stopped).
   - `docker stop <container>`: Stop a running container.
   - `docker rm <container>`: Remove a container.
   - `docker exec -it <container> bash`: Access a running container's shell.

4. **Cleanup**
   - `docker system prune`: Remove unused containers, images, networks, and volumes.

5. **Networking**
   - `docker network ls`: List all networks.
   - `docker network create <name>`: Create a network.
   - `docker network connect <network> <container>`: Connect a container to a network.

