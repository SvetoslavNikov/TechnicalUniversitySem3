What is Hibernate?
Hibernate is an open-source Object-Relational Mapping (ORM) framework for JavaRevise.
It simplifies the interaction between JavaRevise applications and relational databases by mapping JavaRevise objects to database tables.
 Hibernate abstracts the complexities of JDBC (JavaRevise Database Connectivity) and eliminates the need for most SQL, allowing developers to work with
 JavaRevise objects instead of directly dealing with database queries.

Basic Use in JavaRevise
Hibernate is used to:

Persist JavaRevise objects into a relational database (store data).
Fetch data from the database and populate JavaRevise objects.
Perform CRUD operations (Create, Read, Update, Delete) using object-oriented code.
Handle complex relationships like one-to-many, many-to-one, and many-to-many between database tables.
Key Features:
Automatic ORM Mapping: Converts JavaRevise classes into database tables and vice versa.
HQL (Hibernate Query Language): Provides an object-oriented query language.
Lazy Loading: Fetches related data only when needed.
Transaction Management: Simplifies transaction handling.
Database Independence: Works with multiple databases without changing code.
Basic Example in JavaRevise
1. Hibernate Configuration: Create a hibernate.cfg.xml file for database connection settings:

xml
<hibernate-configuration>
    <session-factory>
        <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/your_db</property>
        <property name="hibernate.connection.username">root</property>
        <property name="hibernate.connection.password">password</property>
        <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
        <property name="hibernate.hbm2ddl.auto">update</property>
    </session-factory>
</hibernate-configuration>
2. JavaRevise Entity Class: Map a JavaRevise class to a database table using annotations.

java

import jakarta.persistence.Entity;
import jakarta.persistence.Id;

@Entity
public class Employee {
    @Id
    private int id;
    private String name;
    private String department;

    // Getters and setters
}
3. CRUD Operations with Hibernate: Use Hibernate API to perform database operations.

java
Копиране на код
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class HibernateExample {
    public static void main(String[] args) {
        // Step 1: Create SessionFactory
        SessionFactory factory = new Configuration().configure().buildSessionFactory();

        // Step 2: Create Session
        Session session = factory.openSession();

        // Step 3: Start a transaction
        Transaction transaction = session.beginTransaction();

        // Step 4: Create and save an object
        Employee employee = new Employee();
        employee.setId(1);
        employee.setName("John Doe");
        employee.setDepartment("IT");

        session.save(employee); // Save to database

        // Step 5: Commit transaction and close session
        transaction.commit();
        session.close();
        factory.close();
    }
}
This code demonstrates how to save an Employee object to the database using Hibernate.








