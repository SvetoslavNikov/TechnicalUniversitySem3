ArrayList vs. LinkedList in Java:

ArrayList:

Backed by: Dynamic array.
Access time: Fast (O(1)).
Insertion/Deletion: Slower (O(n)) due to shifting elements.
Use case: Frequent access.

LinkedList:

Backed by: Doubly-linked list.
Access time: Slower (O(n)).
Insertion/Deletion: Faster (O(1)), no shifting.
Use case: Frequent insertions/deletions.
(implements functions of queue and stack)

Queue:

FIFO (First-In, First-Out): First element added is the first one removed.
Use Cases: Task scheduling, buffering.

Stack:

LIFO (Last-In, First-Out): Last element added is the first one removed.
Use Cases: Undo functionality, expression evaluation.